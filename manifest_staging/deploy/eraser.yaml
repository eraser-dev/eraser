apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: eraser-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: eraserconfigs.eraser.sh
spec:
  group: eraser.sh
  names:
    kind: EraserConfig
    listKind: EraserConfigList
    plural: eraserconfigs
    singular: eraserconfig
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: EraserConfig is the Schema for the eraserconfigs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          cacheNamespace:
            description: "CacheNamespace if specified restricts the manager's cache to watch objects in the desired namespace Defaults to all namespaces \n Note: If a namespace is specified, controllers can still Watch for a cluster-scoped resource (e.g Node).  For namespaced resources the cache will only hold objects from the desired namespace."
            type: string
          controller:
            description: Controller contains global configuration options for controllers registered within this manager.
            properties:
              cacheSyncTimeout:
                description: CacheSyncTimeout refers to the time limit set to wait for syncing caches. Defaults to 2 minutes if not set.
                format: int64
                type: integer
              groupKindConcurrency:
                additionalProperties:
                  type: integer
                description: "GroupKindConcurrency is a map from a Kind to the number of concurrent reconciliation allowed for that controller. \n When a controller is registered within this manager using the builder utilities, users have to specify the type the controller reconciles in the For(...) call. If the object's kind passed matches one of the keys in this map, the concurrency for that controller is set to the number specified. \n The key is expected to be consistent in form with GroupKind.String(), e.g. ReplicaSet in apps group (regardless of version) would be `ReplicaSet.apps`."
                type: object
            type: object
          foo:
            type: string
          gracefulShutDown:
            description: GracefulShutdownTimeout is the duration given to runnable to stop before the manager actually returns on stop. To disable graceful shutdown, set to time.Duration(0) To use graceful shutdown without timeout, set to a negative duration, e.G. time.Duration(-1) The graceful shutdown is skipped for safety reasons in case the leader election lease is lost.
            type: string
          health:
            description: Health contains the controller health configuration
            properties:
              healthProbeBindAddress:
                description: HealthProbeBindAddress is the TCP address that the controller should bind to for serving health probes
                type: string
              livenessEndpointName:
                description: LivenessEndpointName, defaults to "healthz"
                type: string
              readinessEndpointName:
                description: ReadinessEndpointName, defaults to "readyz"
                type: string
            type: object
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          leaderElection:
            description: LeaderElection is the LeaderElection config to be used when configuring the manager.Manager leader election
            properties:
              leaderElect:
                description: leaderElect enables a leader election client to gain leadership before executing the main loop. Enable this when running replicated components for high availability.
                type: boolean
              leaseDuration:
                description: leaseDuration is the duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.
                type: string
              renewDeadline:
                description: renewDeadline is the interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.
                type: string
              resourceLock:
                description: resourceLock indicates the resource object type that will be used to lock during leader election cycles.
                type: string
              resourceName:
                description: resourceName indicates the name of resource object that will be used to lock during leader election cycles.
                type: string
              resourceNamespace:
                description: resourceName indicates the namespace of resource object that will be used to lock during leader election cycles.
                type: string
              retryPeriod:
                description: retryPeriod is the duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.
                type: string
            required:
            - leaderElect
            - leaseDuration
            - renewDeadline
            - resourceLock
            - resourceName
            - resourceNamespace
            - retryPeriod
            type: object
          metrics:
            description: Metrics contains thw controller metrics configuration
            properties:
              bindAddress:
                description: BindAddress is the TCP address that the controller should bind to for serving prometheus metrics. It can be set to "0" to disable the metrics serving.
                type: string
            type: object
          syncPeriod:
            description: SyncPeriod determines the minimum frequency at which watched resources are reconciled. A lower period will correct entropy more quickly, but reduce responsiveness to change if there are many watched resources. Change this value only if you know what you are doing. Defaults to 10 hours if unset. there will a 10 percent jitter between the SyncPeriod of all controllers so that all controllers will not send list requests simultaneously.
            type: string
          webhook:
            description: Webhook contains the controllers webhook configuration
            properties:
              certDir:
                description: CertDir is the directory that contains the server key and certificate. if not set, webhook server would look up the server key and certificate in {TempDir}/k8s-webhook-server/serving-certs. The server key and certificate must be named tls.key and tls.crt, respectively.
                type: string
              host:
                description: Host is the hostname that the webhook server binds to. It is used to set webhook.Server.Host.
                type: string
              port:
                description: Port is the port that the webhook server serves at. It is used to set webhook.Server.Port.
                type: integer
            type: object
        type: object
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: imagejobs.eraser.sh
spec:
  group: eraser.sh
  names:
    kind: ImageJob
    listKind: ImageJobList
    plural: imagejobs
    singular: imagejob
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ImageJob is the Schema for the imagejobs API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          status:
            description: ImageJobStatus defines the observed state of ImageJob.
            properties:
              deleteAfter:
                description: Time to delay deletion until
                format: date-time
                type: string
              desired:
                description: desired number of pods
                type: integer
              failed:
                description: number of pods that failed
                type: integer
              phase:
                description: job running, successfully completed, or failed
                type: string
              skipped:
                description: number of nodes that were skipped e.g. because they are not a linux node
                type: integer
              succeeded:
                description: number of pods that completed successfully
                type: integer
            required:
            - desired
            - failed
            - phase
            - skipped
            - succeeded
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - deprecated: true
    deprecationWarning: v1alpha1 of the eraser API has been deprecated. Please migrate to v1.
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ImageJob is the Schema for the imagejobs API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          status:
            description: ImageJobStatus defines the observed state of ImageJob.
            properties:
              deleteAfter:
                description: Time to delay deletion until
                format: date-time
                type: string
              desired:
                description: desired number of pods
                type: integer
              failed:
                description: number of pods that failed
                type: integer
              phase:
                description: job running, successfully completed, or failed
                type: string
              skipped:
                description: number of nodes that were skipped e.g. because they are not a linux node
                type: integer
              succeeded:
                description: number of pods that completed successfully
                type: integer
            required:
            - desired
            - failed
            - phase
            - skipped
            - succeeded
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: imagelists.eraser.sh
spec:
  group: eraser.sh
  names:
    kind: ImageList
    listKind: ImageListList
    plural: imagelists
    singular: imagelist
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ImageList is the Schema for the imagelists API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ImageListSpec defines the desired state of ImageList.
            properties:
              images:
                description: The list of non-compliant images to delete if non-running.
                items:
                  type: string
                type: array
            required:
            - images
            type: object
          status:
            description: ImageListStatus defines the observed state of ImageList.
            properties:
              failed:
                description: Number of nodes that failed to run the job
                format: int64
                type: integer
              skipped:
                description: Number of nodes that were skipped due to a skip selector
                format: int64
                type: integer
              success:
                description: Number of nodes that successfully ran the job
                format: int64
                type: integer
              timestamp:
                description: Information when the job was completed.
                format: date-time
                type: string
            required:
            - failed
            - skipped
            - success
            - timestamp
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - deprecated: true
    deprecationWarning: v1alpha1 of the eraser API has been deprecated. Please migrate to v1.
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ImageList is the Schema for the imagelists API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ImageListSpec defines the desired state of ImageList.
            properties:
              images:
                description: The list of non-compliant images to delete if non-running.
                items:
                  type: string
                type: array
            required:
            - images
            type: object
          status:
            description: ImageListStatus defines the observed state of ImageList.
            properties:
              failed:
                description: Number of nodes that failed to run the job
                format: int64
                type: integer
              skipped:
                description: Number of nodes that were skipped due to a skip selector
                format: int64
                type: integer
              success:
                description: Number of nodes that successfully ran the job
                format: int64
                type: integer
              timestamp:
                description: Information when the job was completed.
                format: date-time
                type: string
            required:
            - failed
            - skipped
            - success
            - timestamp
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eraser-controller-manager
  namespace: eraser-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eraser-imagejob-pods
  namespace: eraser-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eraser-leader-election-role
  namespace: eraser-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: eraser-imagejob-pods-cluster-role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: eraser-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - podtemplates
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - eraser.sh
  resources:
  - imagejobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - eraser.sh
  resources:
  - imagejobs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - eraser.sh
  resources:
  - imagelists
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - eraser.sh
  resources:
  - imagelists/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eraser-leader-election-rolebinding
  namespace: eraser-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: eraser-leader-election-role
subjects:
- kind: ServiceAccount
  name: eraser-controller-manager
  namespace: eraser-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eraser-imagejob-pods-cluster-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eraser-imagejob-pods-cluster-role
subjects:
- kind: ServiceAccount
  name: eraser-imagejob-pods
  namespace: eraser-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eraser-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eraser-manager-role
subjects:
- kind: ServiceAccount
  name: eraser-controller-manager
  namespace: eraser-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: eraser.sh/v1
    kind: EraserConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: e29e094a.k8s.io
    manager:
      runtime: containerd
      otlpEndpoint: ""
      logLevel: info
      scheduling:
        repeatInterval: 24h # to be parsed into time.Duration
        beginImmediately: true
      profile:
        enable: false
        port: 6060
      imageJob:
        successRatio: 1.0 # float; ok with YAML?
        cleanup:
          delayOnSuccess: 0s # to be parsed into time.Duration
          delayOnFailure: 24h
      pullSecrets: [] # image pull secrets for collector/scanner/eraser
      nodeFilter:
        type: exclude # must be either exclude|include
        selectors:
          - eraser.sh/cleanup.filter
    components:
      collector:
        enable: true
        image:
          repo: ghcr.io/azure/collector
          tag: v1.0.0-beta.3
        request:
          mem: 25Mi
          cpu: 7m
        limit:
          mem: 500Mi
          cpu: 1000m
      scanner:
        enable: true
        image:
          repo: ghcr.io/azure/eraser-trivy-scanner # supply custom image for custom scanner
          tag: v1.0.0-beta.3
        request:
          mem: 500Mi
          cpu: 1000m
        limit:
          mem: 2Gi
          cpu: 1500m
        # The config needs to be passed through to the scanner as yaml, as a
        # single string. Because we allow custom scanner images, the scanner is
        # responsible for defining a schema, parsing, and validating.
        config: |
          # this is the schema for the default 'trivy-scanner' we should document
          # this because most users will probably be using the default scanner.
          cacheDir: /var/lib/trivy
          dbRepo: ghcr.io/aquasecurity/trivy-db
          deleteFailedImages: true
          vulnerabilities:
            ignoreUnfixed: true
            types:
              - os
              - library
            securityChecks: # need to be documented; determined by trivy, not us
              - vuln
            severities:
              - CRITICAL
          timeout:
            total: 23h
            perImage: 1h
      eraser:
        image:
          repo: ghcr.io/azure/eraser
          tag: v1.0.0-beta.3
        request:
          mem: 25Mi
          cpu: 7m
        limit:
          mem: 30Mi
          cpu: 1000m
kind: ConfigMap
metadata:
  name: eraser-manager-config
  namespace: eraser-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: eraser-controller-manager
  namespace: eraser-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --config=controller_manager_config.yaml
        command:
        - /manager
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_SERVICE_NAME
          value: eraser-manager
        image: ghcr.io/azure/eraser-manager:v1.0.0-beta.3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /controller_manager_config.yaml
          name: manager-config
          subPath: controller_manager_config.yaml
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: eraser-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: eraser-manager-config
        name: manager-config
