name: test
on:
  push:
    paths-ignore:
      - "**.md"
      - "hack/**"
      - "docs/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - "hack/**"
      - "docs/**"
env:
  REGISTRY: ghcr.io

permissions: read-all

jobs:
  build-e2e-test-list:
    name: "Build E2E Test List"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - id: set-test-matrix
        run: |
          readarray -d '' test_dirs < <(find ./test/e2e/tests -mindepth 1 -type d -print0)
          json_array="$(printf "%s\n" "${test_dirs[@]}" | jq -R . | jq -cs)"
          echo "e2e-tests=${json_array}" > $GITHUB_OUTPUT
    outputs:
      e2e-tests: ${{ steps.set-test-matrix.outputs.e2e-tests }}

  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518
        with:
          egress-policy: audit
      - uses: actions/checkout@v3
      - name: Set up Go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: lint manager
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=10m
      - name: lint eraser
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: pkg/eraser
          skip-pkg-cache: true
          args: --timeout=10m
      - name: lint collector
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: pkg/collector
          skip-pkg-cache: true
          args: --timeout=10m
      - name: lint trivvy scanner
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: pkg/scanners/trivy
          skip-pkg-cache: true
          args: --timeout=10m

  unit-test:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518
        with:
          egress-policy: audit
      - name: Set up Go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: actions/cache@v3.2.3
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Unit test
        run: make test
      - name: Codecov upload
        uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70
        with:
          flags: unittests
          file: ./cover.out
          fail_ci_if_error: false

  check-manifest:
    name: "Check codegen and manifest"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518
        with:
          egress-policy: audit
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Set up Go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Check go.mod and manifests
        run: |
          go mod tidy
          git diff --exit-code
          make generate manifests
          git diff --exit-code

  e2e-test:
      name: "E2E Tests"
      runs-on: ubuntu-latest
      timeout-minutes: 30
      permissions:
        contents: write
      needs:
        - build-e2e-test-list
      strategy:
        fail-fast: false
        matrix:
          KUBERNETES_VERSION: ["1.23.13", "1.24.7", "1.25.3", "1.26.0"]
          E2E_TEST: ${{ fromJson(needs.build-e2e-test-list.outputs.e2e-tests) }}
      steps:
        - name: Harden Runner
          uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518
          with:
            egress-policy: audit
        - name: Check out code into the Go module directory
          uses: actions/checkout@v3
        - name: Set up Go 1.19
          uses: actions/setup-go@v3
          with:
            go-version: 1.19
        - name: Setup buildx instance
          uses: docker/setup-buildx-action@v2
          with:
            use: true
        - uses: actions/cache@v3.2.3
          with:
            key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
            restore-keys: |
              ${{ runner.os }}-go-
            path: |
              ~/go/pkg/mod
              ~/.cache/go-build
        - uses: crazy-max/ghaction-github-runtime@v2
        - name: Set env
          run: |
            echo ERASER_IMG=eraser:test >> $GITHUB_ENV
            echo MANAGER_IMG=manager:test >> $GITHUB_ENV
            echo COLLECTOR_IMG=collector:test >> $GITHUB_ENV
            echo SCANNER_IMG=scanner:test >> $GITHUB_ENV
        - name: Build eraser-manager
          run: make docker-build-manager MANAGER_IMG=${MANAGER_IMG}
        - name: Build eraser
          run: make docker-build-eraser ERASER_IMG=${ERASER_IMG}
        - name: Build collector
          run: make docker-build-collector COLLECTOR_IMG=${COLLECTOR_IMG}
        - name: Build trivy-scanner
          run: make docker-build-trivy-scanner TRIVY_SCANNER_IMG=${SCANNER_IMG}
        - name: Run e2e test
          run: |
            make e2e-test \
              KUBERNETES_VERSION=${{ matrix.KUBERNETES_VERSION }} \
              E2E_TESTS=${{ matrix.E2E_TEST }} \
              ERASER_IMG=${ERASER_IMG} \
              MANAGER_IMG=${MANAGER_IMG} \
              COLLECTOR_IMG=${COLLECTOR_IMG} \
              TRIVY_SCANNER_IMG=${SCANNER_IMG}
        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: test_logs
            path: ${{ github.workspace }}/test_logs/*
            retention-days: 1

  scan_vulnerabilities:
    name: "[Trivy] Scan for vulnerabilities"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518
        with:
          egress-policy: audit

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Get repo
        run: |
          echo "REPO=$(echo $GITHUB_REPOSITORY | awk '{print tolower($0)}')" >> $GITHUB_ENV
      - name: Download trivy
        run: |
          pushd $(mktemp -d)
          wget https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz
          tar zxvf trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz
          echo "$(pwd)" >> $GITHUB_PATH
        env:
          TRIVY_VERSION: "0.28.0"

      - name: Build eraser-manager
        run: |
          make docker-build-manager MANAGER_IMG=${{ env.REGISTRY }}/${REPO}-manager:test
      - name: Build eraser
        run: |
          make docker-build-eraser ERASER_IMG=${{ env.REGISTRY }}/${REPO}:test
      - name: Build collector
        run: |
          make docker-build-collector COLLECTOR_IMG=${{ env.REGISTRY }}/collector:test
      - name: Build trivy scanner
        run: |
          make docker-build-trivy-scanner TRIVY_SCANNER_IMG=${{ env.REGISTRY }}/${REPO}-trivy-scanner:test
      - name: Run trivy for eraser
        run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}:test

      - name: Run trivy for eraser-manager
        run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}-manager:test

      - name: Run trivy for collector
        run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/collector:test

      - name: Run trivy for trivy-scanner
        run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}-trivy-scanner:test
